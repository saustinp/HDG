function [f,f_udg] = flux(p,udg,param,time)
%FLUX Volume flux function
%   [f,fu,fq] = flux(p,u,q,param)
%
%      P(N,ND)              Coordinates for N points
%      U(N,NC)              Unknown vector for N points with NC components
%      Q(N,NC,ND)           Flux vector for N points with NC components in the
%                           coordinate directions
%      PARAM                Parameter list
%      F(N,NC,ND):          Volume flux at N points
%      FU(N,NC,ND,NC):      Jacobian of the flux flux vector w.r.t. U
%      FQ(N,NC,ND,NC,ND):   Jacobian of the flux flux vector w.r.t. Q

[ng,nc] = size(udg);
nch = 2;
nd = size(p,2);

K = param{1};
D  = param{2};

f = zeros(ng,nch,nd);
f_udg = zeros(ng,nch,nd,nc);
%f_q = zeros(ng,nch,nd,nch*nd);


%phi = udg(:,1);
rho = udg(:,2);
phix = udg(:,3);
rhox = udg(:,4);
phiy = udg(:,5);
rhoy = udg(:,6);

% f = D*reshape(q,[ng nch nd]);
% f(:,1,1) = f(:,1,1) + K*(u.*c(:,3));
% f(:,1,2) = f(:,1,2) + K*(u.*c(:,5));
% c     = exactsol(p, cell2mat(param));
% 
% f = D*reshape(q,[ng nch nd]);
% f(:,1,1) = f(:,1,1) + K*(u.*c(:,3));
% f(:,1,2) = f(:,1,2) + K*(u.*c(:,5));

f(:,1,1) = K*rho.*phix + D*rhox;
f(:,1,2) = K*rho.*phiy + D*rhoy;
f(:,2,1) = phix;
f(:,2,2) = phiy;

f_udg(:,1,1,1) = 0;
f_udg(:,1,1,2) = K*phix;
f_udg(:,1,1,3) = K*rho;
f_udg(:,1,1,4) = D;
f_udg(:,1,1,5) = 0;
f_udg(:,1,1,6) = 0;

f_udg(:,1,2,1) = 0;
f_udg(:,1,2,2) = K*phiy;
f_udg(:,1,2,3) = 0;
f_udg(:,1,2,4) = 0;
f_udg(:,1,2,5) = K*rho;
f_udg(:,1,2,6) = D;

f_udg(:,2,1,1) = 0;
f_udg(:,2,1,2) = 0;
f_udg(:,2,1,3) = 1;
f_udg(:,2,1,4) = 0;
f_udg(:,2,1,5) = 0;
f_udg(:,2,1,6) = 0;

f_udg(:,2,2,1) = 0;
f_udg(:,2,2,2) = 0;
f_udg(:,2,2,3) = 0;
f_udg(:,2,2,4) = 0;
f_udg(:,2,2,5) = 1;
f_udg(:,2,2,6) = 0;

