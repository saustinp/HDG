function [u,q,uhat,v] = hdg_ma5(master, mesh, app, u, uhat)
% Extend hdg_ma4 to deal with nonlinear neumman boundary condition

[M, ~, MiB, MiC, MiD, MiE, F, H, G, L, S, ~, ~, P] = hdg_compute(master, mesh, app);
 
% compute the index mapping
elcon = mesh.elcon;

q = getq(MiB, MiC, u, uhat, elcon);
v = getv(MiD, MiE, u, uhat, elcon);
% checkneumann(master, mesh, app, q);
% pause
  
[AE, ~, Ua, ~, Da] = assemble(M, MiB, MiC, MiD, MiE, F, H, G, L, S);

mesh2 = mkcgmesh(mesh);
mesh2.ib = [];
mesh2.in = 1:size(mesh2.p2,1);

% npe = master.npv;
% ne = mesh.ne;
% [ut, A] = cghelmholtz(master,mesh2,reshape(u,[npe ne]),1e-4); 
% il = zeros(npe,npe,ne);
% jl = zeros(npe,npe,ne);
% for i=1:ne    
%     con = mesh2.t2(i,:)';    
%     com = repmat(con,[1 npe]);%[con con con con con con];
%     il(:,:,i) = com;
%     jl(:,:,i) = com';        
% end
% Fe = zeros(npe,ne);

vold = v;
qold = q;
itermax = 50;
iter = 0;
while (iter<itermax)
  tic
  %[FE, Wa] = assembleRHS(master, mesh, app, u, q, v, MiB, Da, G, L, S);
  [AE, FE, Wa] = assembleRHS(master, mesh, app, AE, u, q, v, MiB, MiC, Da, Ua, H, G, L, S);
  toc
  [c, uc] = uaverage(Wa, Ua, P, mesh.elcon);  
  tic
  uhat = linearsystem(AE, FE, elcon, app.neumman, uc, c);  
  toc
  u = getu(Wa, Ua, uhat, elcon);
  %sum(u(:).*P(:))
  
  q = getq(MiB, MiC, u, uhat, elcon);
  v = getv(MiD, MiE, u, uhat, elcon);
  %checkflux(master, mesh, app, u, q, uhat, qold, MiB, MiC, Ua, Wa, H, G, L, S);
  %checkneumann(master, mesh, app, q);
  
%   for l = 1:master.nd
%     for m = 1:master.nd
%       for i = 1:mesh.ne
%           Fe(:,i) = M(:,:,i)*v(:,l,m,i);          
%       end
%       vl = sparse(reshape(il(:,1,:),npe*ne,1),ones(npe*ne,1),reshape(Fe,npe*ne,1)); 
%       vt = A\vl; vt = full(vt(:));
%       vl = reshape(vt(mesh2.t2'), npe, 1, 1, ne);    
%       v(:,l,m,:) = vl;
% %       figure(3); clf; scaplot(mesh,v(:,1,1,:),[],0,1); axis equal; axis tight; colormap jet;
% %       figure(4); clf; scaplot(mesh,vl(:,1,1,:),[],0,1); axis equal; axis tight; colormap jet;      
% %       pause
%     end    
%   end
  
  if norm(v(:)-vold(:)) <= 1e-4
    break;
  end
  
%   figure(1); clf; scaplot(mesh,u(:,1,:),[],0,1); axis equal; axis tight; colormap jet;
%   figure(2); clf; scaplot(mesh,q(:,1,:),[],0,1); axis equal; axis tight; colormap jet;
%   figure(3); clf; scaplot(mesh,v(:,1,1,:),[],0,1); axis equal; axis tight; colormap jet;
%   figure(4); clf; scaplot(mesh,v(:,2,2,:),[],0,1); axis equal; axis tight; colormap jet;
%   figure(5); clf; scaplot(mesh,v(:,1,2,:),[],0,1); axis equal; axis tight; colormap jet;
%   figure(6); clf; scaplot(mesh,v(:,2,1,:),[],0,1); axis equal; axis tight; colormap jet;
%   detJ = v(:,1,1,:).*v(:,2,2,:) - v(:,1,2,:).*v(:,2,1,:);
%   figure(7); clf; scaplot(mesh,detJ,[-1 1],0,1); axis equal; axis tight; colormap jet;
%   x = mesh.dgnodes(:,1,:); x = x(:);
%   y = mesh.dgnodes(:,2,:); y = y(:);
%   ib1 = find(abs(y+0.5)<1e-6);
%   ib2 = find(abs(y-0.5)<1e-6);
%   ib3 = find(abs(x+0.5)<1e-6);
%   ib4 = find(abs(x-0.5)<1e-6);
%   ib = unique([ib1; ib2; ib3; ib4]);
%   ub = u(:);
%   qx = q(:,1,:); qx = qx(:);
%   qy = q(:,2,:); qy = qy(:);
%   [max(abs((x(ib).^2+y(ib).^2)/2-ub(ib))) max(abs(x(ib)-qx(ib))) max(abs(y(ib)-qy(ib)))]
      
  [iter norm(v(:)-vold(:)) norm(q(:)-qold(:))]
  vold = v;
  qold = q;
  iter = iter + 1;
end

figure(2); clf; meshplot(mesh,1);    
%mesh2 = mesh; 
mesh2.dgnodes = q;
figure(3); clf; meshplot(mesh2,1);

end


function [AE, FE, Ua, Wa, Da] = assemble(M, MiB, MiC, MiD, MiE, F, H, G, L, S)

npv = size(M,1);
[npfe, nt] = size(S);
nd = size(MiB,3);

Qa = zeros(npv*nd,npfe);
Ra = zeros(npv*nd,1);

Da = zeros(npv,npv,nt);
Ua = zeros(npv,npfe,nt);
Wa = zeros(npv,nt);
AE = zeros(npfe,npfe,nt);
FE = zeros(npfe,nt);

for i = 1:nt % loop over each element    
    Mass = M(:,:,i);    
    F_K = F(:,i);
    M_K = H(:,:,i);
    G_K = G(:,:,i);
    I_K = L(:,:,i);
    S_K = S(:,i);
        
    Di = -Mass*MiD(:,:,1,1,i);
    Ei = Mass*MiE(:,:,1,1,i);
    for l = 2:nd
      Di = Di - Mass*MiD(:,:,l,l,i);
      Ei = Ei + Mass*MiE(:,:,l,l,i);
    end        
    % Di*U = Ei*Uhat + F_K
    Da(:,:,i) = Di;
    Ua(:,:,i) = Di\Ei;    
    Wa(:,i) = Di\F_K;    
    
    for l = 1:nd
      Qa((l-1)*npv+1:l*npv,:) = MiC(:,:,l,i) - MiB(:,:,l,i)*Ua(:,:,i);
      Ra((l-1)*npv+1:l*npv,:) = MiB(:,:,l,i)*Wa(:,i);
    end    
    H_K = M_K + G_K*Qa - I_K*Ua(:,:,i);
    R_K = G_K*Ra + I_K*Wa(:,i);      
    
    AE(:,:,i) = H_K;
    FE(:,i) = R_K + S_K;    
end

end

function [AE, FE, Wa] = assembleRHS(master, mesh, app, AE, u, q, v, MiB, MiC, Da, Ua, H, G, L, S)

npv = size(Da,1);
[npfe, nt] = size(S);
nd = size(MiB,3);
ngv = master.ngv;
npf = master.npf;
ngf = master.ngf;
nfe = size(master.perm,2);

vg = zeros(ngv, nd, nd);
Qa = zeros(npv*nd,npfe);
Ra = zeros(npv*nd,1);
Wa = zeros(npv,nt);
FE = zeros(npfe,nt);

fbou   = str2func(app.fbou);
source = str2func(app.source);
shapfc = squeeze(master.shapfc(:,:,1));
shap = squeeze(master.shapvl(:,:,1));
for i = 1:nt % loop over each element    
    G_K = G(:,:,i);
    I_K = L(:,:,i);
    S_K = S(:,i);
            
    % form F_K
    [xg, ~, jac] = volgeom(master.shapmv,reshape(mesh.dgnodes(:,:,i),[npv 1 nd]));      
    ug = master.shapmv(:,:,1)*u(:,1,i);
    qg = master.shapmv(:,:,1)*q(:,:,i);
    sg = source(xg, [ug qg], app.param);        
    for l = 1:nd
      vg(:,:,l) = master.shapmv(:,:,1)*v(:,:,l,i);
    end        
    fg = -sqrt(2*sg + vg(:,1,1).^2 + vg(:,2,2).^2 + vg(:,1,2).^2 + vg(:,2,1).^2);
    F_K = shap*(master.gwvl.*jac.*fg);    
        
    Wa(:,i) = Da(:,:,i)\F_K;        
    for l = 1:nd
      Ra((l-1)*npv+1:l*npv,:) = MiB(:,:,l,i)*Wa(:,i);
    end    
    
    nbc = 0; % check boundary conditions
    for j = 1:nfe 
      ibf = -mesh.f(abs(mesh.t2f(i,j)),end);
      if (ibf>0) && (app.bcm(ibf) > 1)          
        nbc = 1;        
      end
    end
    
    if nbc == 1
      M_K = H(:,:,i);      
      [xf, nlg, jacf] = facegeom(master.shapmf,reshape(mesh.dgnodes(:,:,i),[npv 1 nd]),master.perm);        
      xf = reshape(xf, [ngf nfe nd]);
      nlg = reshape(nlg, [ngf nfe nd]);
      jacf = reshape(jacf, [ngf nfe]);    
      for j = 1:nfe % loop over each face of the element i
          ibf = -mesh.f(abs(mesh.t2f(i,j)),end);
          if (ibf>0) && (app.bcm(ibf) > 1)          
            I = master.perm(:,j,1);
            J = ((j-1)*npf+1):j*npf;        
            pars = app.bcd(ibf,:);
            
            nl = reshape(nlg(:,j,:),[ngf nd]);
            xgf = reshape(xf(:,j,:),[ngf nd]);
            
            dws = master.gwfc.*jacf(:,j);                             
            qn = reshape(q(master.perm(:,j),:,i),[npf nd]);    
            %qn(:,1).^2 + qn(:,2).^2
            qg = reshape(master.shapmf(:,:,1)*qn,[ngf nd]);                   
            G_K(J,:) = 0;
            for l=1:nd              
                tmx = shapfc*diag(dws.*qg(:,l)/pars(l))*shapfc';
                %tmx = -shapfc*diag(dws.*nl(:,l))*shapfc';
                G_K(J,(l-1)*npv+I) = G_K(J,(l-1)*npv+I) - 2*tmx;   
            end                  
            %gb = fbou(xgf,nl,app.param,app.bcm(ibf));   
            %S_K(J,:) = shapfc*(dws.*(gb - qg(:,1).^2/pars(1) - qg(:,2).^2/pars(2)));             
            [gb, dgb] = fbou(xgf,nl,qg,pars,app.bcm(ibf));               
            S_K(J,:) = shapfc*(dws.*(-gb + dgb(:,1).*qg(:,1) + ));             
          end
      end
      for l=1:nd      
        Qa((l-1)*npv+1:l*npv,:) = MiC(:,:,l,i) - MiB(:,:,l,i)*Ua(:,:,i);
      end
%       err = AE(:,:,i) - (M_K + G_K*Qa - I_K*Ua(:,:,i));      
%       if max(abs(err(:)))>1e-6
%         AE(:,:,i)
%         (M_K + G_K*Qa - I_K*Ua(:,:,i))
%         mesh.dgnodes(:,:,i)
%         max(abs(err(:)))
%         err
%         error("wrong");
%       end      
      AE(:,:,i) = M_K + G_K*Qa - I_K*Ua(:,:,i);           
%       pause
    end        
    
    FE(:,i) = G_K*Ra + I_K*Wa(:,i) + S_K;    
end

end


function uhat = linearsystem(AE, FE, elcon, neumann, uc, c)

[npfe, nt] = size(FE);

il = zeros(npfe,npfe,nt);
jl = zeros(npfe,npfe,nt);
for i=1:nt
    con = repmat((elcon(:,i)'-1),1,1)+ones(1,npfe);
    con = reshape(con,npfe,1);
    il(:,:,i) = repmat(con ,1,npfe);
    jl(:,:,i) = repmat(con',npfe,1);        
end
H = sparse(reshape(il,(npfe)^2*nt,1),reshape(jl,(npfe)^2*nt,1),reshape(AE,(npfe)^2*nt,1));
R = sparse(reshape(il(:,1,:),(npfe)*nt,1),ones((npfe)*nt,1),reshape(FE,(npfe)*nt,1));                    

if neumann==1
%   n = length(R);
%   e = zeros(1,n); 
%   e(1) = 1;
%   e = sparse(e);  
%   R(end+1) = 0;
%   H(end+1,:) = e;    
%   uhat = H\R;  
  
  R(end+1) = -c;
  H(end+1,:) = uc;  
  H(:,end+1) = [uc(:); 4*max(abs(uc(:)))];
  ut = H\R;
  uhat = ut(1:end-1);    
  %[ut(1) ut(end)]
  
%   H(:,1) = [];
%   ut = H\R;
%   uhat = [0; ut];

%     H(1,2:end) = 0;
%     %H(2:end,1) = 0;
%     R(1) = 0;   
%     uhat = H\R;    
else  
  uhat = H\R;
end

end

function checkflux(master, mesh, app, u, q, uhat, qold, MiB, MiC, Ua, Wa, H, G, L, S)

[~, nt] = size(S);
nd = master.nd;
npv = master.npv;
npf = master.npf;
ngf = master.ngf;
nfe = size(master.perm,2);
perm = master.perm;

Ra = zeros(npv*nd,1);
Qa = zeros(npv*nd,npf*nfe);

fbou   = str2func(app.fbou);
shapfc = squeeze(master.shapfc(:,:,1));
for i = 1:nt % loop over each element    
    M_K = H(:,:,i);
    G_K = G(:,:,i);
    I_K = L(:,:,i);
    S_K = S(:,i);
            
    nbc = 0; % check boundary conditions
    for j = 1:nfe 
      ibf = -mesh.f(abs(mesh.t2f(i,j)),end);
      if (ibf>0) && (app.bcm(ibf) == 1)          
        nbc = 1;        
      end
    end
    if nbc == 1
      [xf, nlg, jacf] = facegeom(master.shapmf,reshape(mesh.dgnodes(:,:,i),[npv 1 nd]),master.perm);        
      xf = reshape(xf, [ngf nfe nd]);
      nlg = reshape(nlg, [ngf nfe nd]);
      jacf = reshape(jacf, [ngf nfe]);    
      for l=1:nd      
        Qa((l-1)*npv+1:l*npv,:) = MiC(:,:,l,i) - MiB(:,:,l,i)*Ua(:,:,i);
        Ra((l-1)*npv+1:l*npv,:) = MiB(:,:,l,i)*Wa(:,i);
      end
      qi = q(:,:,i);
      [reshape(Qa*uhat(mesh.elcon(:,i))-Ra,size(qi)) qi]
      for j = 1:nfe % loop over each face of the element i
          ibf = -mesh.f(abs(mesh.t2f(i,j)),end);
          if (ibf>0) && (app.bcm(ibf) == 1)          
            I = master.perm(:,j,1);
            J = ((j-1)*npf+1):j*npf;        
            pars = app.bcd(ibf,:);
            
            nl = reshape(nlg(:,j,:),[ngf nd]);
            xgf = reshape(xf(:,j,:),[ngf nd]);
            
%             dws = master.gwfc.*jacf(:,j);                             
%             qn = reshape(qold(master.perm(:,j),:,i),[npf nd]);    
%             %qn(:,1).^2 + qn(:,2).^2
%             qg = reshape(master.shapmf(:,:,1)*qn,[ngf nd]);                   
%             G_K(J,:) = 0;
%             for l=1:nd              
%                 tmx = shapfc*diag(dws.*qg(:,l)/pars(l))*shapfc';
%                 G_K(J,(l-1)*npv+I) = G_K(J,(l-1)*npv+I) - 2*tmx;   
%             end                  
%             gb = fbou(xgf,nl,app.param,app.bcm(ibf));   
%             S_K(J,:) = shapfc*(dws.*(gb - qg(:,1).^2 - qg(:,2).^2));             
            
            Gx = G_K(J,1:npv);
            Gy = G_K(J,(npv+1):2*npv);
            qi = q(perm(:,j),:,i);
            %s = G_K(J,:)*qi(:) + M_K(J,:)*uhat(mesh.elcon(:,i)) - I_K(J,:)*u(:,1,i);            
            s = Gx(:,perm(:,j))*qi(:,1) + Gy(:,perm(:,j))*qi(:,2) + M_K(J,J)*uhat(mesh.elcon(J,i)) - I_K(J,perm(:,j))*u(perm(:,j),1,i); 
            [s S_K(J,:)]            
            [M_K(J,:)*uhat(mesh.elcon(:,i))-I_K(J,:)*u(:,1,i)]
            [ibf app.bcm(ibf)]
            Gx(:,perm(:,j))
            Gy(:,perm(:,j))
            qi            
            pause
          end
      end
    end        
end

end


% function [u,q,uhat,v] = hdg_ma5(master, mesh, app, u, uhat)
% %HDG_POI Solve the poission problem using HDG
% 
% [~, ~, MiB, MiC, MiD, MiE] = hdg_compute(master, mesh, app);
%  
% x = (mesh.dgnodes(:,1,:));
% y = (mesh.dgnodes(:,2,:));
% uex = exp(0.5*(x.*x+y.*y));
% qex = 0*mesh.dgnodes(:,1:2,:);
% vex = zeros(master.npv,mesh.nd,mesh.nd,mesh.ne);
% qex(:,1,:) = x.*uex;
% qex(:,2,:) = y.*uex;
% vex(:,1,1,:) = uex + x.^2.*uex;
% vex(:,2,2,:) = uex + y.^2.*uex;
% vex(:,1,2,:) = x.*y.*uex;
% vex(:,2,1,:) = x.*y.*uex;
% 
% % compute the index mapping
% elcon = mesh.elcon;
% 
% % u = uex;
% % uhat = inituhat(master,mesh.elcon,u,1);
% % uhat = uhat(:);
% q = getq(MiB, MiC, u, uhat, elcon);
% v = getv(MiD, MiE, u, uhat, elcon);
% 
% max(abs(uex(:)-u(:)))
% max(abs(qex(:)-q(:)))
% max(abs(vex(:)-v(:)))
% 
% app.source = 'sourcema4';
% app.flux = 'fluxma4';
% app.fbou = 'fbouma4';
% app.fhat = 'fhatma4';
% app.localsolve=1;
% 
% app.arg = {1.0};
% app.bcs = [0;0;0;0];
% app.bcd = [];
% app.bcv = [];
% 
% app.hybrid = 'hdg';
% app.tdep = false;
% app.wave = false;
% app.alag = false;
% app.flg_q = 1;
% app.flg_p = 0;
% app.flg_g = 0;
% app.fc_q = 1;
% app.fc_u = 0;
% app.fc_p = 0;
% app.nd = 2;
% app.nch  = 1;                    
% app.nc   = app.nch*(app.nd+1);   
% app.ncu = 1;
% app.time = [];
% app.dtfc = [];
% app.alpha = [];
% 
% iter = 0;
% itermax = 20;
% while iter<itermax
%   %v = vex;
%   mesh.dgnodes(:,3,:) = v(:,1,1,:);
%   mesh.dgnodes(:,4,:) = v(:,1,2,:);
%   mesh.dgnodes(:,5,:) = v(:,2,1,:);
%   mesh.dgnodes(:,6,:) = v(:,2,2,:);
% 
%   udg(:,1,:) = u;
%   udg(:,2:3,:) = -q;
%   [udg,uhat] = hdg_solve(master,mesh,app,udg,uhat.',0*udg);
%   uhat = uhat.';
%   u = udg(:,1,:);
% 
%   q = getq(MiB, MiC, u, uhat, elcon);
%   v = getv(MiD, MiE, u, uhat, elcon);
%   iter = iter + 1;
%   figure(2); clf; scaplot(mesh,u(:,1,:),[],0,1); axis equal; axis tight; colormap jet;
%   %pause
% end
% 
% % uex = sin(0.5*pi*x).*sin(0.5*pi*y);
% % max(abs(uex(:)-u(:)))
% % pause
% 
% 
% 
% 
